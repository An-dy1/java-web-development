Routes
======

A **route** is the mechanism by which a request path gets assigned to a
controller within our application. In this section, we’ll explore routes
and how data is transferred from a webpage to a specific controller.

.. admonition:: Note

   Do HTTP requests and responses feel unfamiliar? Do you remember what a **query string**
   is? If you're feeling rusty on these topics, it's a good idea to brush up now, as routing 
   requires a foundational understanding of HTTP data transfer.

   Here's our `introduction to HTTP <https://education.launchcode.org/intro-to-professional-web-dev/chapters/http/index.html>`__ 
   for reviewing the concepts.


We’ll look at three different ways controller methods handle data from users:

#. Via a ``GET`` request and query parameters 
#. Via a ``POST`` request and post parameters 
#. Via a URL segment and a path variable

Query Strings are URL Data
--------------------------

A brief refresher: Query strings are additional bits of information tacked onto the ends of urls.
They contain data in key-value pairs.

.. sourcecode:: bash

   www.galaxyglossary.net?aKey=aValue&anotherKey=anotherValue&thirdKey=thirdValue

``@RequestParam``
-----------------

We can pass ``@RequestParam`` as an argument of a controller method. This annotation as an
argument lets the handler method know about a given query parameter based on its own argument.




Data Transfer by ``GET``
------------------------

Pass in an argument 

#. Add to your controller a parameter that is a request object of the
   ``HttpServletRequest`` class.
#. Get data from this request object by using the key of the desired
   parameter and the method ``getParameter``.
#. Use the data in your controller to return a customized greeting.

.. sourcecode:: java

   @RequestMapping(value = "")
   @ResponseBody
   public String index(HttpServletRequest request){
      String name = request.getParameter("name");
      return "Hello " + name;
   }

Data Transfer by ``POST``
-------------------------

#. Display a form that will allow the user to submit data. To do this,
   create a new request handler that returns a string of HTML.

.. sourcecode:: java

   @RequestMapping(value = "hello", method = RequestMethod.GET)
   @ResponseBody
   public String helloForm(){
      String html = "<form method='post'>" +
               "<input type='text' name='name' />" +
               "<input type='submit' value='Greet Me!'/>" +
               "</form>";
      return html;
   }

#. Create another handler that will handle ``POST`` requests and access
   the request object.

.. sourcecode:: java

   @RequestMapping(value = "hello", method = RequestMethod.POST)
   @ResponseBody
   public String helloPost(HttpServletRequest request){
      String name = request.getParameter("name");
      return "Hello " + name;
   }

Data Transfer by URL Segment
----------------------------

#. Create a new handler that will access data via a URL segment:

.. sourcecode:: java

   @RequestMapping(value = "hello/{name}")
   @ResponseBody
   public String helloUrlSegment(@PathVariable String name){
      return "Hello " + name;
   }

.. note::

   Also know that you can redirect a user by removing the ``@ResponseBody``
   annotation from the controller and returning
   ``"redirect:/DESIREDPATH"``.



.. all controller methods within a controller class live below a url segment

.. cutomize routes w/ requestmapping annotation
.. declaring http request types
.. pass parameters - 
..    get/query params
..    post params
..    url segments

.. mvc flow - routing is part of the machinery of the framework
.. browser makes a request to a web server, tomcat. this is wrapped up in spring boot
.. when a web server receives a request, its going to unpack it. http is like the usps. 
.. how the message is to be sent, who sent it, who is to receive it, and what they are sending.
.. how can we configure our controllers to handle the right types of requests

.. how we can handle params within our application

.. look at the different ways our handler methods acn receive data via an http request
.. first, query parameters - ?key=value

.. get the params that are passed into the server via that query string.
.. add an input param to index method.

.. HttpServletRequest - the request is an object that represents the data that is recieved in the http request
the variable name can change but the key passed in getParameter must match the key in the query string

.. what happens if you dont pass in that key in a query string in your url?
.. try it out!

.. skip debugging step in intelliJ

.. you dont want to call a method on a null object. nulls are dangerous in java.
/change code so taht if a user doesnt @ass in a param, we greet them with hello world.

.. .. note::

..    Be aware that you can change the URL segment for a group of controllers
..    by using the ``@RequestMapping`` annotation at the class level. We won’t
..    be doing much of this right now, but in future web apps, that technique
..    will come in handy.
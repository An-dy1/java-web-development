.. _tech-jobs-mvc:

Assignment #3: Tech Jobs (MVC Edition)
=======================================

Introduction
------------

Your first two tasks as an apprentice went well! You, Blake, and Sally built
the TechJobs console prototype and then refactored the code to move it to an
object-oriented format.

After demonstrating the project for the Company Team at LaunchCode, it received
the green light to be fully built out as a web application.

The first step in this process will be to quickly develop a `minimum viable
product <https://en.wikipedia.org/wiki/Minimum_viable_product>`__, or MVP. The
goal is to get a functioning web app up and running with as little work as
possible. That way, additional feedback and testing can be done early in the
development process. After that, additional behind-the-scenes work will be
carried out to fully develop the model and data side of the application.

For this next step in the project, you’ll be working with Carly.

.. figure:: figures/LC-Carly.png
   :scale: 55%
   :alt: Carly's LaunchCode avatar.

Carly was once a LaunchCode apprentice as well, so she knows just what
it’s like to be in your shoes. She’s done some initial work on the
project and left you some TODOs that she knows you can handle.

Learning Objectives
-------------------

In this project, you’ll show that you can:

#. Read and understand code written by others.
#. Work within the controller and view portions of a Spring Boot application.
#. Use Thymeleaf syntax to display data within a view.
#. Create new handler methods to process form submission.

TechJobs (MVC Edition)
----------------------

You’ll start with some code that Carly has provided. The idea behind your
current assignment is to quickly deliver a functioning Spring Boot application,
so you’ll focus on the controllers and views.

In order to do this, you’ll be reusing the ``JobData`` class and
``job_data.csv`` file from the console app. You will eventually have to go back
and rewrite the data portion of the application to make a true, database-backed
model. However, using the existing ``JobData`` class to provide some basic data
functionality lets you focus on the views and controllers for now.

Your Assignment
---------------

Carly created a Spring Boot application and filled in some features. She
refactored ``JobData`` to generate an ArrayList of ``Job`` objects based on
your TechJobs-OO work, and she added controllers and views for a home page.

She also created some basic templates for displaying lists of jobs for each
field of the data (``employer``, ``location``, etc.). You will need to add some
details to these views to complete their functionality.

Finally, Carly started working on the search feature, but only got as far as
writing the code to display the search form.

She’s handed the project to you to finish the rest. You’ll add code to the
controllers and views to process the display and search results, along with
allowing users to see all jobs in the system via the *List* page.

Getting Started
----------------

Set up a local copy of the project:

#. Visit the `repository page <https://github.com/LaunchCodeEducation/techjobs-mvc>`__
   for this project. Fork the repository to create a copy under your own GitHub
   account.
#. Back in IntelliJ, close any open projects (after saving and committing your
   work).
#. From the welcome screen, click *Check out from Version Control*, select
   *Git*.
#. Choose your fork from the repository dropdown, select the parent directory
   where you want to store your project, and hit *Clone*.
#. In the screens that follow:

   a. Choose *Create Project From Existing Sources* on the first pane.
   b. Select *Auto Import* in the Gradle configuration pane.
   c. Use the defaults on all other panes.

#. Start up the application (via the Gradle pane, *Tasks > Application >
   bootRun*), so you can refer to both the code as well as the running app
   while we look at what’s in place already.

.. admonition:: Note

   You’ll spend a lot of time reading and understanding the code that’s provided
   for you. This is OK! It’s an essential skill for a programmer to be
   able to read and understand code written by other developers.

The Model
^^^^^^^^^

.. admonition:: Note

   When referring to Java class locations, we’ll usually omit the leading
   path: ``src/main/java/org/launchcode/``.

The "model" is contained in the ``JobData`` class, which is in the ``models``
package. We put "model" in quotes, since this class isn’t a model in the
typical, MVC/object-oriented sense (maybe a better name for this assignment
would be *TechJobs VC*).

The ``JobData`` class serves the same purpose as before---it reads data from
the ``job_data.csv`` file and stores it in a format we can use (in this case,
an ArrayList of ``Job`` objects). Note that Carly changed the path to the
``job_data.csv`` file so that it could be stored in the ``src/main/resources``
directory.

You’ll use some of the static methods provided by ``JobData`` in your
controller code. Since you’re already familiar with these, we’ll leave it to
you to review their functionality as you go.

The Controllers
^^^^^^^^^^^^^^^

Expand the ``controllers`` package, and you’ll see that you have three
controllers already in place. Let’s look at these one at a time.

``HomeController``
~~~~~~~~~~~~~~~~~~~

This class has only one handler method, ``index``, which displays the home page
for the app. The controller renders the ``index.html`` template (in
``src/main/resources/templates``).

If you haven’t done so already, launch the app and examine the home page to see
what it looks like.

``ListController``
~~~~~~~~~~~~~~~~~~~

This controller provides functionality for users to see lists of all values of
a given data column: ``employer``, ``location``, ``skill``, and
``positionType``. If you look at the corresponding page at ``/list`` you’ll see
there’s also an "All" option presented. That one doesn’t work yet, but you will
fully implement that view in your work.

At the top of ``ListController`` is a constructor that we use to populate
``columnChoices`` with values. The ``columnChoices`` HashMap plays the same
role as it did in the console app, which is to provide a centralized collection
of the different *List* and *Search* options presented throughout the user
interface.

``ListController`` also has ``list`` and ``listJobsByColumnAndValue`` handler
methods, with routes as annotated above the method definitions. The first of
these displays clickable links for the different job categories that the user
can view. The second displays the information obtained from ``JobData`` that
relates to a user's choice.

In the ``listJobsByColumnAndValue`` method, the controller uses two query
parameters passed in as ``column`` and ``value`` to determine what to fetch
from ``JobData``. In the case of ``"all"`` it will fetch all job data,
otherwise, it will retrieve a smaller set of information. The controller then
renders the ``list-jobs.html`` view. We’ll explore the ``list.html`` and
``list-jobs.html`` templates in a moment.

``listJobsByColumnAndValue`` works similarly to the search functionality, in
that we are "searching" for a particular value within a particular column and
then displaying jobs that match. However, this is slightly different from the
other way of searching in that the user will arrive at this handler method as a
result of clicking on a link within the ``list`` view, rather than via
submitting a form. We’ll see where these links originate when we look at the
views. Also note that the ``listJobsByColumnAndValue`` method deals with an
"all" scenario differently than if a user clicks one of the category links.

``SearchController``
~~~~~~~~~~~~~~~~~~~~~

Lorem ipsum...

The Views
^^^^^^^^^

Let’s turn our attention to the views.

``fragments.html``
~~~~~~~~~~~~~~~~~~~

Open up the ``src/main/resources/templates/index.html`` file in IntelliJ, and
in your browser navigate to the site’s home page. You’ll notice that there is a
fair amount of content visible on the page that isn’t contained in
``index.html``. This is because we’re using two fragments from
``fragments.html`` (``head`` and ``page-header``). These allow for some basic
page structure and navigation to be shared across all of our views. Have a look
at ``fragments.html``, but know you won’t have to do any work within this file
for this assignment.

.. admonition:: Tip

   We use `Twitter’s Bootstrap <http://getbootstrap.com/>`__ CSS, HTML, and
   JS framework to provide some styling and functionality to our views. The
   appropriate files are included at the top of ``fragments.html`` and thus
   are included on every page of our app.

   You won’t have to explicitly use Bootstrap at all in this assignment,
   but it’s a great way to make your sites look good with minimal work.
   Consider using it on your own projects!

List Views
~~~~~~~~~~~

Turn your attention to ``list.html``. This page displays a table of links
broken down into several categories. Data from ``columnChoices`` is used to
fill in the header row, and data from the ArrayLists ``employers``,
``locations``, etc. generates the link text.

The only remarkable thing in this template is how we generate the links:

.. sourcecode:: html
   :lineno-start: 26

   <td th:each="category : ${tableChoices}">
      <li th:each="item : ${category.value}">
         <a th:href="@{/list/jobs(column=${category.key},value=${item})}" th:text="${item}"></a>
      </li>
   </td>

We’ve seen the syntax ``@{/list/jobs}`` to generate a link within a
Thymleaf template, but we haven’t seen the other portion of the link:
``(column=${category.key},value=${position})``. This syntax causes Thymeleaf to
dynamically generate query parameters for our URL based on the variables
specified.

In ``list.html``, we set these parameters by using ``column=`` and ``value=``.
The values of these parameters are determined dynamically based on
``${category.key}`` and ``${item}``. Since these values come from
``tableChoices`` in the controller, the *keys* will be ``employer``
``location``, etc. The *values* will be the individual elements from the
related ArrayList. When the user clicks on these links, they will be routed to
the ``listJobsByColumnAndValue`` handler in ``ListController``, which looks for
these parameters.

In your browser, click on one of the the *Position Type* links. This sends a
request as we just outlined, resulting in a list of all of the jobs in the data
set that match the selected location.

The page you see at ``/list/values?column=location&value=...`` is generated by
the ``list-jobs.html`` template. It has a similar structure as ``list.html``,
but the table consists of only one column.

.. admonition:: Note

   Select "Kansas City" from the list of locations, and then check the address
   bar of your browser:

   .. sourcecode:: bash

      /list/jobs?column=location&value=Kansas%20City

   Note that Thymeleaf inserts ``%20`` for us, to represent a space, but this
   may actually be hidden in your browser’s address bar.

Clicking on these links will display a list of jobs in the given location, via
the ``listJobsByColumnAndValue`` handler method. However, that display isn’t
working yet. While the handler method is fully implemented, as we noted above,
the view template needs some additional work.

Search View
~~~~~~~~~~~~

Finally, click on *Search* from the home page, or the navigation bar, and open
up ``search.html``. You’ll see a search form (in both the browser and template
file) that gives the user the option of searching by a given column, or across
all columns. This is an exact visual analog of our console application.

This template will be used to display search results, in addition to rendering
the form. This will give the nice user experience of easily searching multiple
times in a row.

Your Tasks
-----------

Once you understand the controllers and views that are already in place, you’re
ready to begin your work.

In IntelliJ, select *View > Tool Windows > TODO* to pop open a small pane at
the bottom of the window. This list is populated by any code comments that
start with ``TODO``. In particular, you’ll see your 3 tasks listed.

   TODO: Add task list figure here...

As you work on your tasks, refer to the
`demo app <http://techjobs-mvc.cfapps.io/>`__.

   TODO: Update demo link.

Add Search Results Handler
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a ``displaySearchResults`` handler method to ``SearchController``:

#. Use the correct annotation for the method. To configure the correct mapping
   type and mapping route, refer to the ``form`` tag in the ``search.html``
   template.
#. The ``displaySearchResults`` method should take in a ``Model`` parameter.
#. The method should also take in two other parameters, specifying the type of
   search and the search term.
#. In order for these last two parameters to be properly passed in by Spring
   Boot, you need to use the correct annotation. Also, you need to name them
   appropriately, based on the corresponding form field names defined in
   ``search.html``.
#. Send the search information to the appropriate ``JobData`` method, and store
   the results in a ``jobs`` ArrayList.
#. Pass ``jobs`` into the ``search.html`` view via the ``model`` parameter.
#. Pass ``ListController.columnChoices`` into the view, as the existing
   ``search`` handler does.

Display Search Results
^^^^^^^^^^^^^^^^^^^^^^

Once you have your ``displaySearchResults`` handler passing information to the
view, you need to display the data.

#. In ``search.html``, create a loop to display each job passed in from the
   controller.
#. You should put each job in its own table, with one job field per row.
#. Add the CSS class ``"job-listing"`` to each of the tables to get some nice
   styling, courtesy of Carly’s work!

Display List of All Jobs
^^^^^^^^^^^^^^^^^^^^^^^^

Recall that the page at the path ``/list/values?column=all`` doesn’t display
any results yet. This page needs to show full job listings, just like the
search results page. In fact, you can reuse the code you just wrote in
``search.html`` by defining a new fragment in that file, and then including the
fragment in ``list.jobs.html``.

.. admonition:: Warning

   For the fragment to work properly in a different file, the data passed
   into the view via ``model.addAttribute()`` must have the same key in
   both places.

Sanity Check
-------------

Before submitting, make sure that your application:

#. Allows a user at ``/search`` to search for jobs matching a specific search
   term, both within a specific column and across all columns.
#. Displays search results at ``/search/results``.
#. Displays jobs with alternately white and gray backgrounds (this is provided
   by the ``"job-listing"`` class).
#. Displays a listing of all 98 jobs in the system, when the user goes to the
   *List* page and selects "All".

Refer to the `demo app <http://techjobs-mvc.cfapps.io/>`__ to make sure your
app behaves as expected.

How to Submit
--------------

To turn in your assignment and get credit, follow the
:ref:`submission instructions <how-to-submit-work>`.

Bonus Missions
--------------

Here are some additional challenges, for those willing to take them on:

#. When searching, if we select a given field to search within and submit, our
   choice is forgotten. Modify the view template to keep the previous search
   field selected when displaying results.
#. The field names in the tables displaying full job data are not capitalized.
   Fix this. (*Hint:* We capitalize the title string in multiple templates, so
   have a look around).
#. In the search results listing and the listing of all jobs, make each value
   (except ``name``) hyperlinked to the listing of all jobs with that value, as
   is done on the ``/list/values`` page.

Super Bonus Mission
^^^^^^^^^^^^^^^^^^^^

This is a big one! Prepare for a challenge!

Notice that we went to the trouble of passing in the ``actionChoices``
HashMap to the view in the ``HomeController.index`` method. This puts the
responsibility of which actions should be presented on the controller, and not
the view. However, we didn’t go to such lengths for the navigation links
displayed on every page of the site.

In order to make the navigation links similarly detached, we’d need to pass
``actionChoices`` in to *every* view, since the nav links are generated in
``fragments.html``. We’d have to do something like the line below in every
handler method, which would be a pain, not to mention error-prone and difficult
to update.

.. sourcecode:: Java

   model.addAttribute("actions", actionChoices);

Let’s fix this.

#. Make a new controller, ``TechJobsController``. This new controller should
   have a static HashMap, ``actionChoices``. The HashMap should be populated
   via a no-argument/default constructor, just like ``columnChoices`` is
   populated in ``ListController``. You do NOT need to add the ``@Controller``
   annotation to this class.
#. Write a static method ``getActionChoices`` in ``TechJobsController`` that
   returns the ``actions`` HashMap.
#. Add the annotation ``@ModelAttribute("actions")`` to this method. This
   annotation will cause the return value of the method to be set in the model
   with key ``"actions"`` for every controller that extends
   ``TechJobsController``.
#. Modify every one of your other controllers to extend ``TechJobsController``.
#. Modify ``fragments.html`` to use the passed-in action choices to generate
   the navigation links.
#. Finally, update your code so that ``columnChoices`` also lives in
   ``TechJobsController``.
